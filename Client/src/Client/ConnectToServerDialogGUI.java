package Client;


import Protocol.CommunicationProtocol;
import Protocol.Client;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

public class ConnectToServerDialogGUI extends javax.swing.JDialog {
    MainGUI parentMain;
    String pathToSharedDirectory;
    File[] files;

    /**
     * Creates new form ConnectToServerDialog
     */
    public ConnectToServerDialogGUI(MainGUI parent, boolean modal) {
        super(parent, modal);
        parentMain = (MainGUI) parent;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        ipDoServidorTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        portoDoServidor = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        nomeTextField = new javax.swing.JTextField();
        ligarServidorButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        pastaPartilhadaTextField = new javax.swing.JTextField();
        escolherPastaButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        portoFicheiros = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        portoRede = new javax.swing.JTextField();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("IPv4 of the Server");

        jLabel2.setText("Server Port");

        jLabel3.setText("Name");

        ligarServidorButton.setText("Connect to Server");
        ligarServidorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ligarServidorButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Folder to Share");

        escolherPastaButton.setText("Choose Folder");
        escolherPastaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escolherPastaButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Port for Receiving Files");

        jLabel6.setText("Port for Network Communications");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4)
                    .addComponent(ligarServidorButton)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ipDoServidorTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                    .addComponent(portoDoServidor)
                    .addComponent(nomeTextField)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(pastaPartilhadaTextField)
                        .addGap(18, 18, 18)
                        .addComponent(escolherPastaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portoFicheiros)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portoRede))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(ipDoServidorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(portoDoServidor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(portoFicheiros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(portoRede, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(nomeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pastaPartilhadaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(escolherPastaButton))
                .addGap(32, 32, 32)
                .addComponent(ligarServidorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ligarServidorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ligarServidorButtonActionPerformed
        //Obter dados
        String ipServer = ipDoServidorTextField.getText();
        String portServer = portoDoServidor.getText();
        String portFiles = portoFicheiros.getText();
        String portNetwork = portoRede.getText();
        String nomeCliente = nomeTextField.getText();
        
        //Verificar dados
        InetAddress ipServerInet = null;
        int portServerInt = -1;
        int portFilesInt = -1;
        int portNetworkInt = -1;
        try{
            ipServerInet = InetAddress.getByName(ipServer);
        }
        catch(UnknownHostException e){
            JOptionPane.showMessageDialog(null, "IP inserida invalida", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try{
            portServerInt = Integer.parseInt(portServer);
            portFilesInt = Integer.parseInt(portFiles);
            portNetworkInt = Integer.parseInt(portNetwork);
            
            if(portServerInt < 1023 || portServerInt > 65535){
                JOptionPane.showMessageDialog(null, "Porto do servidor fora do intervalo valido", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if(portFilesInt < 1023 || portFilesInt > 65535){
                JOptionPane.showMessageDialog(null, "Porto de ficheiros fora do intervalo valido", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if(portNetworkInt < 1023 || portNetworkInt > 65535){
                JOptionPane.showMessageDialog(null, "Porto de rede fora do intervalo valido", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
        }
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Porto inserido invalido", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //Obter todos os ficheiros (incluindo de subdiretorias) de uma diretoria
        File sharedDirectory = new File(pathToSharedDirectory);
        if(sharedDirectory.exists() && sharedDirectory.isDirectory()){
            try {
                //walk gera um stream. Um stream é uma forma de manipular colecções de dados de forma funcional,
                //sem necessidade de ciclos tradicionais. Portanto, map e toArray 
                //são metodos de Stream e aplicam-se a cada elemento do Stream.
                
                //walk percorre a diretoria toda, obtendo diretorias, subdiretorias e os seus ficheiros todos
                //filter filtra os elementos de forma que só fiquem ficheiros e não as diretorias
                //map converte esses caminhos a ficheiros
                //toArray converte o stream num File[]
                files = Files.walk(Paths.get(pathToSharedDirectory))
                        .filter(path -> Files.isRegularFile(path))
                        .map(path -> path.toFile())
                        .toArray(size -> new File[size]);
            } catch (IOException ex) {
                Logger.getLogger(ConnectToServerDialogGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "A diretoria não existe", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        
        //Enviar dados
        try{
            Socket socketServer = new Socket(ipServerInet.getHostAddress(), portServerInt);
            ObjectOutputStream objectOutput = new ObjectOutputStream(socketServer.getOutputStream());
            ObjectInputStream objectInput = new ObjectInputStream(socketServer.getInputStream());
            
            Client clientForLoggin = new Client(nomeCliente, InetAddress.getLocalHost().getHostAddress(), portNetworkInt, files);
            CommunicationProtocol request = new CommunicationProtocol("LOGIN");
            request.setClientForLogin(clientForLoggin);
            objectOutput.writeObject(request);
            objectOutput.flush();
            
            CommunicationProtocol response = (CommunicationProtocol) objectInput.readObject();
            
            //Fechar recursos
            objectOutput.close();
            objectInput.close();
            socketServer.close();
            
            if(response.getCodeProtocol().equalsIgnoreCase("OK")){
                JOptionPane.showMessageDialog(null, response.getMessage(),  "SUCESSO", JOptionPane.INFORMATION_MESSAGE);
                parentMain.recebirDadosLoginFromDialog(nomeCliente, portServerInt, portFilesInt, portNetworkInt, ipServerInet, response.getMulticastGroup(), response.getMulticastGroupPort(), pathToSharedDirectory, response.getActiveClients(), files);
            }
            else{
                JOptionPane.showMessageDialog(null, response.getMessage(),  "ERROR", JOptionPane.ERROR_MESSAGE);
            }
            
        }
        catch(IOException | ClassNotFoundException e){
            JOptionPane.showMessageDialog(null, "Ocorreu um problema ao tentar ligar ao servidor", "ERROR!", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_ligarServidorButtonActionPerformed

    private void escolherPastaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_escolherPastaButtonActionPerformed
        FileChooserDialogGUI fileChooserDialog = new FileChooserDialogGUI(ConnectToServerDialogGUI.this, true);
        fileChooserDialog.setVisible(true);
    }//GEN-LAST:event_escolherPastaButtonActionPerformed

    public void recebirDiretorioFromDialog(String path){
        pathToSharedDirectory = path;
        pastaPartilhadaTextField.setText(path);
    }
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton escolherPastaButton;
    private javax.swing.JTextField ipDoServidorTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton ligarServidorButton;
    private javax.swing.JTextField nomeTextField;
    private javax.swing.JTextField pastaPartilhadaTextField;
    private javax.swing.JTextField portoDoServidor;
    private javax.swing.JTextField portoFicheiros;
    private javax.swing.JTextField portoRede;
    // End of variables declaration//GEN-END:variables
}
